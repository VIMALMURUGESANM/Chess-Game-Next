"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./chessLogic.ts":
/*!***********************!*\
  !*** ./chessLogic.ts ***!
  \***********************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getValidMoves: function() { return /* binding */ getValidMoves; },\n/* harmony export */   isCheck: function() { return /* binding */ isCheck; },\n/* harmony export */   isCheckmate: function() { return /* binding */ isCheckmate; }\n/* harmony export */ });\nfunction getValidMoves(board, row, col) {\n    let considerPin = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : true, canCastleKingside = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : false, canCastleQueenside = arguments.length > 5 && arguments[5] !== void 0 ? arguments[5] : false;\n    const piece = board[row][col];\n    const isWhite = piece === piece.toUpperCase();\n    let moves = [];\n    switch(piece.toLowerCase()){\n        case \"p\":\n            moves = getPawnMoves(board, row, col, isWhite);\n            break;\n        case \"r\":\n            moves = getRookMoves(board, row, col, isWhite);\n            break;\n        case \"n\":\n            moves = getKnightMoves(board, row, col, isWhite);\n            break;\n        case \"b\":\n            moves = getBishopMoves(board, row, col, isWhite);\n            break;\n        case \"q\":\n            moves = getQueenMoves(board, row, col, isWhite);\n            break;\n        case \"k\":\n            moves = getKingMoves(board, row, col, isWhite, canCastleKingside, canCastleQueenside);\n            break;\n    }\n    if (considerPin) {\n        moves = moves.filter((param)=>{\n            let [newRow, newCol] = param;\n            return !movePutsOwnKingInCheck(board, row, col, newRow, newCol, isWhite);\n        });\n    }\n    return moves;\n}\nfunction getPawnMoves(board, row, col, isWhite) {\n    var _board_;\n    const moves = [];\n    const direction = isWhite ? -1 : 1;\n    const startRow = isWhite ? 6 : 1;\n    if (((_board_ = board[row + direction]) === null || _board_ === void 0 ? void 0 : _board_[col]) === \"\") {\n        var _board_1;\n        moves.push([\n            row + direction,\n            col\n        ]);\n        if (row === startRow && ((_board_1 = board[row + 2 * direction]) === null || _board_1 === void 0 ? void 0 : _board_1[col]) === \"\") {\n            moves.push([\n                row + 2 * direction,\n                col\n            ]);\n        }\n    }\n    for (const dcol of [\n        -1,\n        1\n    ]){\n        var _board_2;\n        if (((_board_2 = board[row + direction]) === null || _board_2 === void 0 ? void 0 : _board_2[col + dcol]) && isOpponentPiece(board[row + direction][col + dcol], isWhite)) {\n            moves.push([\n                row + direction,\n                col + dcol\n            ]);\n        }\n    }\n    return moves;\n}\nfunction getRookMoves(board, row, col, isWhite) {\n    return getStraightMoves(board, row, col, isWhite);\n}\nfunction getKnightMoves(board, row, col, isWhite) {\n    const moves = [];\n    const knightMoves = [\n        [\n            -2,\n            -1\n        ],\n        [\n            -2,\n            1\n        ],\n        [\n            -1,\n            -2\n        ],\n        [\n            -1,\n            2\n        ],\n        [\n            1,\n            -2\n        ],\n        [\n            1,\n            2\n        ],\n        [\n            2,\n            -1\n        ],\n        [\n            2,\n            1\n        ]\n    ];\n    for (const [dr, dc] of knightMoves){\n        const newRow = row + dr;\n        const newCol = col + dc;\n        if (isValidPosition(newRow, newCol) && (board[newRow][newCol] === \"\" || isOpponentPiece(board[newRow][newCol], isWhite))) {\n            moves.push([\n                newRow,\n                newCol\n            ]);\n        }\n    }\n    return moves;\n}\nfunction getBishopMoves(board, row, col, isWhite) {\n    return getDiagonalMoves(board, row, col, isWhite);\n}\nfunction getQueenMoves(board, row, col, isWhite) {\n    return [\n        ...getStraightMoves(board, row, col, isWhite),\n        ...getDiagonalMoves(board, row, col, isWhite)\n    ];\n}\nfunction getKingMoves(board, row, col, isWhite, canCastleKingside, canCastleQueenside) {\n    const moves = [];\n    const kingMoves = [\n        [\n            -1,\n            -1\n        ],\n        [\n            -1,\n            0\n        ],\n        [\n            -1,\n            1\n        ],\n        [\n            0,\n            -1\n        ],\n        [\n            0,\n            1\n        ],\n        [\n            1,\n            -1\n        ],\n        [\n            1,\n            0\n        ],\n        [\n            1,\n            1\n        ]\n    ];\n    for (const [dr, dc] of kingMoves){\n        const newRow = row + dr;\n        const newCol = col + dc;\n        if (isValidPosition(newRow, newCol) && (board[newRow][newCol] === \"\" || isOpponentPiece(board[newRow][newCol], isWhite))) {\n            moves.push([\n                newRow,\n                newCol\n            ]);\n        }\n    }\n    moves.push(...getCastlingMoves(board, row, col, isWhite, canCastleKingside, canCastleQueenside));\n    return moves;\n}\nfunction getCastlingMoves(board, row, col, isWhite, canCastleKingside, canCastleQueenside) {\n    const castlingMoves = [];\n    if (isCheck(board, isWhite)) return castlingMoves;\n    const backRank = isWhite ? 7 : 0;\n    if (canCastleKingside && board[backRank][5] === \"\" && board[backRank][6] === \"\") {\n        if (!isSquareUnderAttack(board, backRank, 4, isWhite) && !isSquareUnderAttack(board, backRank, 5, isWhite) && !isSquareUnderAttack(board, backRank, 6, isWhite)) {\n            castlingMoves.push([\n                backRank,\n                6\n            ]);\n        }\n    }\n    if (canCastleQueenside && board[backRank][1] === \"\" && board[backRank][2] === \"\" && board[backRank][3] === \"\") {\n        if (!isSquareUnderAttack(board, backRank, 4, isWhite) && !isSquareUnderAttack(board, backRank, 3, isWhite) && !isSquareUnderAttack(board, backRank, 2, isWhite)) {\n            castlingMoves.push([\n                backRank,\n                2\n            ]);\n        }\n    }\n    return castlingMoves;\n}\nfunction isSquareUnderAttack(board, row, col, isWhite) {\n    const opponentColor = isWhite ? \"b\" : \"w\";\n    const directions = [\n        [\n            -1,\n            -1\n        ],\n        [\n            -1,\n            0\n        ],\n        [\n            -1,\n            1\n        ],\n        [\n            0,\n            -1\n        ],\n        [\n            0,\n            1\n        ],\n        [\n            1,\n            -1\n        ],\n        [\n            1,\n            0\n        ],\n        [\n            1,\n            1\n        ]\n    ];\n    // Check for pawn attacks\n    const pawnDirection = isWhite ? 1 : -1;\n    if (isValidPosition(row + pawnDirection, col - 1) && board[row + pawnDirection][col - 1].toLowerCase() === \"p\" && isOpponentPiece(board[row + pawnDirection][col - 1], isWhite)) return true;\n    if (isValidPosition(row + pawnDirection, col + 1) && board[row + pawnDirection][col + 1].toLowerCase() === \"p\" && isOpponentPiece(board[row + pawnDirection][col + 1], isWhite)) return true;\n    // Check for knight attacks\n    const knightMoves = [\n        [\n            -2,\n            -1\n        ],\n        [\n            -2,\n            1\n        ],\n        [\n            -1,\n            -2\n        ],\n        [\n            -1,\n            2\n        ],\n        [\n            1,\n            -2\n        ],\n        [\n            1,\n            2\n        ],\n        [\n            2,\n            -1\n        ],\n        [\n            2,\n            1\n        ]\n    ];\n    for (const [dr, dc] of knightMoves){\n        const newRow = row + dr;\n        const newCol = col + dc;\n        if (isValidPosition(newRow, newCol) && board[newRow][newCol].toLowerCase() === \"n\" && isOpponentPiece(board[newRow][newCol], isWhite)) return true;\n    }\n    // Check for attacks from other pieces (rook, bishop, queen, king)\n    for (const [dr, dc] of directions){\n        let newRow = row + dr;\n        let newCol = col + dc;\n        let distance = 1;\n        while(isValidPosition(newRow, newCol)){\n            const piece = board[newRow][newCol].toLowerCase();\n            if (piece !== \"\") {\n                if (isOpponentPiece(board[newRow][newCol], isWhite)) {\n                    if (piece === \"q\" || piece === \"r\" && (dr === 0 || dc === 0) || piece === \"b\" && dr !== 0 && dc !== 0 || piece === \"k\" && distance === 1) {\n                        return true;\n                    }\n                }\n                break;\n            }\n            newRow += dr;\n            newCol += dc;\n            distance++;\n        }\n    }\n    return false;\n}\nfunction getStraightMoves(board, row, col, isWhite) {\n    const moves = [];\n    const directions = [\n        [\n            -1,\n            0\n        ],\n        [\n            1,\n            0\n        ],\n        [\n            0,\n            -1\n        ],\n        [\n            0,\n            1\n        ]\n    ];\n    for (const [dr, dc] of directions){\n        let newRow = row + dr;\n        let newCol = col + dc;\n        while(isValidPosition(newRow, newCol)){\n            if (board[newRow][newCol] === \"\") {\n                moves.push([\n                    newRow,\n                    newCol\n                ]);\n            } else if (isOpponentPiece(board[newRow][newCol], isWhite)) {\n                moves.push([\n                    newRow,\n                    newCol\n                ]);\n                break;\n            } else {\n                break;\n            }\n            newRow += dr;\n            newCol += dc;\n        }\n    }\n    return moves;\n}\nfunction getDiagonalMoves(board, row, col, isWhite) {\n    const moves = [];\n    const directions = [\n        [\n            -1,\n            -1\n        ],\n        [\n            -1,\n            1\n        ],\n        [\n            1,\n            -1\n        ],\n        [\n            1,\n            1\n        ]\n    ];\n    for (const [dr, dc] of directions){\n        let newRow = row + dr;\n        let newCol = col + dc;\n        while(isValidPosition(newRow, newCol)){\n            if (board[newRow][newCol] === \"\") {\n                moves.push([\n                    newRow,\n                    newCol\n                ]);\n            } else if (isOpponentPiece(board[newRow][newCol], isWhite)) {\n                moves.push([\n                    newRow,\n                    newCol\n                ]);\n                break;\n            } else {\n                break;\n            }\n            newRow += dr;\n            newCol += dc;\n        }\n    }\n    return moves;\n}\nfunction isValidPosition(row, col) {\n    return row >= 0 && row < 8 && col >= 0 && col < 8;\n}\nfunction isOpponentPiece(piece, isWhite) {\n    return piece !== \"\" && (isWhite ? piece === piece.toLowerCase() : piece === piece.toUpperCase());\n}\nfunction isCheck(board, isWhiteKing) {\n    const kingPiece = isWhiteKing ? \"K\" : \"k\";\n    for(let row = 0; row < 8; row++){\n        for(let col = 0; col < 8; col++){\n            if (board[row][col] === kingPiece) {\n                return isSquareUnderAttack(board, row, col, isWhiteKing);\n            }\n        }\n    }\n    return false; // This should never happen in a valid chess position\n}\nfunction isCheckmate(board, isWhiteKing) {\n    if (!isCheck(board, isWhiteKing)) return false;\n    for(let row = 0; row < 8; row++){\n        for(let col = 0; col < 8; col++){\n            const piece = board[row][col];\n            if (piece !== \"\" && (isWhiteKing ? piece === piece.toUpperCase() : piece === piece.toLowerCase())) {\n                const moves = getValidMoves(board, row, col, true, false, false);\n                if (moves.length > 0) {\n                    return false;\n                }\n            }\n        }\n    }\n    return true;\n}\nfunction movePutsOwnKingInCheck(board, fromRow, fromCol, toRow, toCol, isWhite) {\n    const newBoard = board.map((row)=>[\n            ...row\n        ]);\n    newBoard[toRow][toCol] = newBoard[fromRow][fromCol];\n    newBoard[fromRow][fromCol] = \"\";\n    return isCheck(newBoard, isWhite);\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./chessLogic.ts\n"));

/***/ })

});